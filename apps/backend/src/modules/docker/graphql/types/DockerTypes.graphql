type DockerVersion {
    Version: String,
    ApiVersion: String,
}

type DockerStack {
    name: String
    services: Int
}

type DockerImage{
    name: String
    nameWithTag: String
    namespace: String
    domain: String
    fullname: String
    tag: String
}

type Port{
    protocol: String
    containerPort: Int
    hostPort: Int
}

type Volume{
    type: String
    containerVolume: String
    hostVolume: String
}

type Env{
    name: String
    value: String
}

type Label{
    name: String
    value: String
}

type Constraint {
    name: String!
    operation: String
    value: String
}

type Limit{
    memoryReservation: Float
    memoryLimit: Float
    CPUReservation: Float
    CPULimit: Float
}

type Preference {
    name: String!
    value: String
}

type DockerService {
    id: String
    name: String
    stack: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    ports: [Port]
    volumes: [Volume]
    envs: [Env]
    labels: [Label]
    constraints: [Constraint]
    limits: Limit
    preferences: [Preference]
    command: String
}



type DockerContainer {
    id: String
    name: String
    task: String
    nodeId: String
    image: DockerImage
    createdAt: String
    state: String,
    status: String
    command: String
    labels: [DockerLabel]
}

type DockerStats{
    cpu: String
    memoryLimit: String
    memoryUsage: String
}

type DockerTaskStats{
    task: DockerTask
    stats: DockerStats
}

type DockerTask {
    id: String
    nodeId: String
    serviceId: String
    containerId: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    state: String
    message: String
}

type DockerLabel{
    key: String
    value: String
}

type DockerTaskLog{
    text: String
}

type DockerNode{
    id: String
    hostname: String
    ip: String
    role: String
    leader: Boolean
    reachability: String
    state: String
    engine: String
    availability: String
}

input ServiceTaskLogs{
    timestamps: Boolean,
    tail: String,
    since: String,
    fetch: String
}

type Query {
    dockerVersion: DockerVersion
    fetchStack: [DockerStack]
    findServiceById(id:String!):DockerService
    findService(name:String!):DockerService
    findServiceTag(name:String!):String
    fetchService(stack:String): [DockerService]
    fetchContainer(service:String): [DockerContainer]
    fetchTask(service:String): [DockerTask]
    fetchTaskInspect(taskId:String): JSON
    findTaskRunningByServiceAndNode(serviceName:String!, nodeId: String!): DockerTask
    dnsTaskRunningByServiceAndNode(serviceName:String!, nodeId: String!): String
    fetchNode(role: String): [DockerNode]
    findNode(id: String): DockerNode
    serviceTaskLogs(task: String!,filters: ServiceTaskLogs): [DockerTaskLog]
    serviceStats(serviceId: ID!): [DockerTaskStats]
    serviceStatsByName(serviceName: String!): [DockerTaskStats]
    taskStats(taskId: ID!): DockerTaskStats
    containerStats(containerId: ID!): DockerStats
    fetchNetworks: [DockerNetwork]
}

type DockerNetwork {
  Name: String
  Id: String
  Created: String
  Scope: String
  Driver: String
  EnableIPv6: Boolean
  IPAM: IPAM
  Internal: Boolean
  Attachable: Boolean
  Ingress: Boolean
  ConfigFrom: ConfigFrom
  ConfigOnly: Boolean
  Containers: [String]
}

type IPAM {
  Driver: String
  Options: String
  Config: [IPAMConfig]
}

type IPAMConfig {
  Subnet: String
  Gateway: String
}

type ConfigFrom {
  Network: String
}

type DockerRestart{
    Warnings: String
}

type DockerRemove{
    message: String
}

input NetworksInput {
  Target: String!
  Aliases: [String!]
}

input PortInput{
    protocol: String
    containerPort: Int
    hostPort: Int
}

input VolumeInput{
    type: String
    containerVolume: String
    hostVolume: String
}

input EnvInput{
    name: String
    value: String
}

input LabelInput{
    name: String
    value: String
}

input ConstraintServiceInput {
    name: String!
    operation: String
    value: String
}

input LimitServiceInput{
    memoryReservation: Float
    memoryLimit: Float
    CPUReservation: Float
    CPULimit: Float
}

input PreferenceServiceInput {
    name: String!
    value: String
}

input DockerServiceInput {
    name: String!
    stack: String
    image: String!
    ports: [PortInput]
    volumes: [VolumeInput]
    envs: [EnvInput]
    labels: [LabelInput]
    constraints: [ConstraintServiceInput]
    limits: LimitServiceInput
    preferences: [PreferenceServiceInput]
    networks: [NetworksInput]
}

type Mutation {
    dockerRestart(serviceId: String!): DockerRestart
    dockerRestartMany(serviceIds: [String!]): [DockerRestart]

    dockerRemove(serviceId: String!): DockerRemove
    dockerRemoveMany(serviceIds: [String!]): [DockerRemove]

    dockerServiceCreate(input: DockerServiceInput): DockerService
    dockerServiceUpdate(input: DockerServiceInput): DockerService
}

