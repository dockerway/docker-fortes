type DockerVersion {
    Version: String,
    ApiVersion: String,
}

type DockerStack {
    name: String
    services: Int
}

type Port{
    protocol: String
    targetPort: Int
    publishedPort: Int
}

type DockerService {
    id: String
    name: String
    stack: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    ports: [Port]
}

type DockerImage{
    name: String
    namespace: String
    domain: String
    fullname: String
    tag: String
}

type DockerContainer {
    id: String
    name: String
    task: String
    nodeId: String
    image: DockerImage
    createdAt: String
    state: String,
    status: String
    command: String
    labels: [DockerLabel]
}

type DockerLabel{
    key: String
    value: String
}

type DockerLog{
    timestamp: String,
    text: String
}

type DockerNode{
    id: String
    hostname: String
    ip: String
    role: String
    leader: Boolean
    reachability: String
    state: String
    engine: String
    availability: String
}

type Query {
    dockerVersion: DockerVersion
    fetchStack: [DockerStack]
    fetchService(stack:String): [DockerService]
    fetchContainer(service:String): [DockerContainer]
    fetchNode(role: String): [DockerNode]
    findNode(id: String): DockerNode
    serviceLogs(service: String!): [DockerLog]
}
