type DockerVersion {
    Version: String,
    ApiVersion: String,
}

type DockerStack {
    name: String
    services: Int
}

type DockerImage{
    name: String
    nameWithTag: String
    namespace: String
    domain: String
    fullname: String
    tag: String
}

type Port{
    protocol: String
    containerPort: Int
    hostPort: Int
}

type Volume{
    type: String
    containerVolume: String
    hostVolume: String
}

type Env{
    name: String
    value: String
}

type Label{
    name: String
    value: String
}

type DockerService {
    id: String
    name: String
    stack: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    ports: [Port]
    volumes: [Volume]
    envs: [Env]
    labels: [Label]
}



type DockerContainer {
    id: String
    name: String
    task: String
    nodeId: String
    image: DockerImage
    createdAt: String
    state: String,
    status: String
    command: String
    labels: [DockerLabel]
}

type DockerTask {
    id: String
    nodeId: String
    serviceId: String
    containerId: String
    image: DockerImage
    createdAt: String
    updatedAt: String
    state: String,
    message: String
}

type DockerLabel{
    key: String
    value: String
}

type DockerLog{
    timestamp: String,
    text: String
}

type DockerNode{
    id: String
    hostname: String
    ip: String
    role: String
    leader: Boolean
    reachability: String
    state: String
    engine: String
    availability: String
}

type Query {
    dockerVersion: DockerVersion
    fetchStack: [DockerStack]
    findService(name:String!):DockerService
    findServiceTag(name:String!):String
    fetchService(stack:String): [DockerService]
    fetchContainer(service:String): [DockerContainer]
    fetchTask(service:String): [DockerTask]
    fetchNode(role: String): [DockerNode]
    findNode(id: String): DockerNode
    serviceLogs(service: String!): [DockerLog]
}

type DockerRestart{
    Warnings: String
}

type DockerRemove{
    message: String
}

input PortInput{
    protocol: String
    containerPort: Int
    hostPort: Int
}

input VolumeInput{
    type: String
    containerVolume: String
    hostVolume: String
}

input EnvInput{
    name: String
    value: String
}

input LabelInput{
    name: String
    value: String
}


input DockerServiceInput {
    name: String!
    stack: String
    image: String!
    ports: [PortInput]
    volumes: [VolumeInput]
    envs: [EnvInput]
    labels: [LabelInput]
}


type Mutation {
    dockerRestart(serviceId: String!): DockerRestart
    dockerRestartMany(serviceIds: [String!]): [DockerRestart]

    dockerRemove(serviceId: String!): DockerRemove
    dockerRemoveMany(serviceIds: [String!]): [DockerRemove]

    dockerServiceCreate(input: DockerServiceInput): DockerService
}
